# -*- coding: utf-8 -*-
"""TUGAS ALGORITMA 7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dbmSoCdAvC-GrvV83lyyjnilQKlG69w7
"""

import time

def faktorial_rekursi_dasar(n):
    """Faktorial menggunakan rekursi dasar."""
    if n == 0:
        return 1
    else:
        return n * faktorial_rekursi_dasar(n-1)

def faktorial_memoization(n, memo={}):
    """Faktorial menggunakan rekursi dengan memoization."""
    if n in memo:
        return memo[n]
    if n == 0:
        return 1
    else:
        memo[n] = n * faktorial_memoization(n-1, memo)
        return memo[n]

def faktorial_iterasi(n):
    """Faktorial menggunakan iterasi."""
    hasil = 1
    for i in range(1, n + 1):
        hasil *= i
    return hasil

def fibonacci_rekursi_dasar(n):
    """Fibonacci menggunakan rekursi dasar."""
    if n <= 1:
        return n
    else:
        return fibonacci_rekursi_dasar(n-1) + fibonacci_rekursi_dasar(n-2)

def fibonacci_memoization(n, memo={}):
    """Fibonacci menggunakan rekursi dengan memoization."""
    if n in memo:
        return memo[n]
    if n <= 1:
        return n
    else:
        memo[n] = fibonacci_memoization(n-1, memo) + fibonacci_memoization(n-2, memo)
        return memo[n]

def fibonacci_iterasi(n):
    """Fibonacci menggunakan iterasi."""
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(2, n + 1):
        a, b = b, a + b
    return b

def bandingkan_kinerja(fungsi, input_nilai, jumlah_percobaan=5):
    """Mengukur waktu eksekusi fungsi."""
    total_waktu = 0
    for _ in range(jumlah_percobaan):
        mulai = time.time()
        fungsi(input_nilai)
        selesai = time.time()
        total_waktu += (selesai - mulai)
    return total_waktu / jumlah_percobaan

# Input nilai dari pengguna
nilai_faktorial = int(input("Masukkan nilai untuk faktorial: "))
nilai_fibonacci = int(input("Masukkan nilai untuk Fibonacci: "))

# Bandingkan kinerja faktorial
print("\nFaktorial:")
print(f"  Rekursi Dasar: {bandingkan_kinerja(faktorial_rekursi_dasar, nilai_faktorial)} detik")
print(f"  Memoization: {bandingkan_kinerja(faktorial_memoization, nilai_faktorial)} detik")
print(f"  Iterasi: {bandingkan_kinerja(faktorial_iterasi, nilai_faktorial)} detik")

# Bandingkan kinerja Fibonacci
print("\nFibonacci:")
print(f"  Rekursi Dasar: {bandingkan_kinerja(fibonacci_rekursi_dasar, nilai_fibonacci)} detik")
print(f"  Memoization: {bandingkan_kinerja(fibonacci_memoization, nilai_fibonacci)} detik")
print(f"  Iterasi: {bandingkan_kinerja(fibonacci_iterasi, nilai_fibonacci)} detik")

import random

def buat_array_terurut(ukuran, rentang):
    """Membuat array terurut dengan nilai acak."""
    array = sorted(random.sample(range(rentang), ukuran))
    return array

def pencarian_biner_rekursif(array, target, rendah, tinggi, hitung_perbandingan):
    """Pencarian biner rekursif dengan penghitung perbandingan."""
    if rendah > tinggi:
        return -1, hitung_perbandingan  # Target tidak ditemukan

    tengah = (rendah + tinggi) // 2
    hitung_perbandingan += 1  # Hitung perbandingan

    if array[tengah] == target:
        return tengah, hitung_perbandingan  # Target ditemukan
    elif array[tengah] < target:
        return pencarian_biner_rekursif(array, target, tengah + 1, tinggi, hitung_perbandingan)
    else:
        return pencarian_biner_rekursif(array, target, rendah, tengah - 1, hitung_perbandingan)

def main():
    """Fungsi utama untuk menjalankan pencarian biner dengan input data terpisah."""
    ukuran_array = int(input("Masukkan ukuran array: "))
    rentang_nilai = int(input("Masukkan rentang nilai (0 hingga rentang - 1): "))
    array_terurut = buat_array_terurut(ukuran_array, rentang_nilai)

    print("Array terurut:", array_terurut)

    target = int(input("Masukkan target yang ingin dicari: "))

    # Lakukan pencarian biner
    indeks, jumlah_perbandingan = pencarian_biner_rekursif(array_terurut, target, 0, len(array_terurut) - 1, 0)

    if indeks != -1:
        print(f"Target ditemukan pada indeks {indeks}")
    else:
        print("Target tidak ditemukan dalam array")

    print(f"Jumlah perbandingan: {jumlah_perbandingan}")

if __name__ == "__main__":
    main()

def tower_of_hanoi(n, sumber, tujuan, bantuan, gerakan):
    """Solusi rekursif untuk Tower of Hanoi dengan visualisasi."""
    if n == 1:
        print(f"Gerakan {gerakan}: Pindahkan cakram 1 dari {sumber} ke {tujuan}")
        gerakan[0] += 1
    else:
        tower_of_hanoi(n-1, sumber, bantuan, tujuan, gerakan)
        print(f"Gerakan {gerakan}: Pindahkan cakram {n} dari {sumber} ke {tujuan}")
        gerakan[0] += 1
        tower_of_hanoi(n-1, bantuan, tujuan, sumber, gerakan)

def main():
    """Fungsi utama untuk menjalankan Tower of Hanoi dengan berbagai jumlah cakram."""
    for n in [3, 4, 5]:
        print(f"\nTower of Hanoi dengan {n} cakram:")
        gerakan = [1]  # Gunakan list agar bisa diubah di fungsi rekursif
        tower_of_hanoi(n, 'A', 'C', 'B', gerakan)
        print(f"Total gerakan: {gerakan[0]-1}")

if __name__ == "__main__":
    main()